import nibabel as nib
import numpy as np
import pandas as pd

# Load the NIfTI image
nifti_file = 'RH_pathway_aMFG_pairT_tmap.nii.gz'
img = nib.load(nifti_file)

# Get the image data as a numpy array
data = img.get_fdata()

# Get the affine matrix (to transform voxel coordinates to world coordinates)
affine = img.affine

# Get all voxel coordinates and their values
non_zero_voxels = np.argwhere(data != 0)  # Find non-zero voxel coordinates
voxel_values = data[non_zero_voxels[:, 0], non_zero_voxels[:, 1], non_zero_voxels[:, 2]]  # Get the corresponding values

# Transform voxel coordinates to world coordinates (physical space)
voxel_coords = np.dot(affine, np.c_[non_zero_voxels, np.ones(len(non_zero_voxels))].T).T[:, :3]

# Combine coordinates and values
data_combined = np.hstack((voxel_coords, voxel_values[:, np.newaxis]))

# Create a DataFrame and save to CSV
df = pd.DataFrame(data_combined, columns=['X', 'Y', 'Z', 'Value'])
# filter nan
df = df[~np.isnan(df['Value'])]
df.to_csv('coordinates_and_values.csv', index=False)

print("CSV file saved as 'coordinates_and_values.csv'")

#############################3
## simple method
import nibabel as nib
import numpy as np
import pandas as pd
nifti_file = 'RH_pathway_aMFG_pairT_tmap.nii.gz'
def nii_to_points(nifti_file):
    img = nib.load(nifti_file)
    data = img.get_fdata()
    affine = img.affine
    non_zero_voxels = np.argwhere(data != 0)
    voxel_values = data[non_zero_voxels[:, 0], non_zero_voxels[:, 1], non_zero_voxels[:, 2]]
    voxel_coords = np.dot(affine, np.c_[non_zero_voxels, np.ones(len(non_zero_voxels))].T).T[:, :3]
    data_combined = np.hstack((voxel_coords, voxel_values[:, np.newaxis]))
    df = pd.DataFrame(data_combined, columns=['X', 'Y', 'Z', 'Value'])
    df = df[~np.isnan(df['Value'])]
    return df


    
    
    
    
    
